"use srtict"

// ! ###Оголошуємо змінні###

// * Змінна, яка зберігає кількість карток на дошці. Ініціалізувати із значенням 12.
const numberOfCards = 12;

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Змінна, яка зберігає час затримки перед перевертанням картки. Ініціалізувати зі значенням 1000.
const delayTime = 1000;

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Змінна, значення якої визначає чи маємо на дошці перевернуту картку. Ініціалізуємо зі значенням false.
let  invertedCard = false;

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Змінні, значення яких зберігатиму першу та другу перевернуту картку. Тільки оголошуємо, без ініціалізації.
let firstInvertedCard;
let secondInvertedCard;
// * Змінна, яка зберігає всі об'єкти карток. Знаходимо на сторінці всі елементи з класами ".memory-card" і записуємо в змінну.
let allCards = document.querySelectorAll(".memory-card");


////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////
// ! ###Пишемо функції ###

// * Функція, яка скидає значення змінних дошки. Змінній, значення якої визначає, чи маємо на дошці перевернуту картку, ставимо вихідне значення. Змінним значення яких зберігають першу і другу перевернуту карту присвоюємо порожнє значення.
function resetsValue(){
    invertedCard = false;
    firstInvertedCard = null;
    secondInvertedCard = null;
}

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Функція, яка через певний час перевертає картки у вихідний стан. Функція повинна через FLIP_CARD_DELAY виконати такі дії:
// * - вивести в консоль два повідомлення:
// * Перше повідомлення: "Перевернули у вихідний стан першу картку"
// * Друге повідомлення: "Перевернули у вихідний стан другу картку"
// * - викликати функцію скидання змінних дошки
function cardsOriginalState(){
    setTimeout(function(){
        firstInvertedCard.classList.remove("flip")
        secondInvertedCard.classList.remove("flip")
        resetsValue();
    }, delayTime)
}


////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Функція, яка визначає чи збігаються перевернуті картки. Функція як параметри приймає назву фреймворку першої картки та назву фреймворку другої картки. Якщо назви збігаються, вивести в консоль текст "Дія 1", інакше вивести в консоль текст "Дія 2";
function matchingCards(сardOne, cardTwo){
    if(сardOne === cardTwo){
        cardBlocking();
    } else {
        cardsOriginalState();
    }
}

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Функція, яка буде обробником при натисканні на картку.
// * Як параметр функція приймає об'єкт події
// * Якщо значення в змінних, що зберігають першу та другу картку не пусті - зупиняємо роботу функції.
// * Якщо картка, на яку натиснули і значення записане в змінній, яка призначена для зберігання першої перевернутої картки збігаються - зупиняємо роботу функції.
// * Додаємо картці клас "flip"
// * Перевіряємо, якщо на дошці ще немає перевернутих карток, то:
// * - змінюємо значення змінної, яка визначає чи маємо ми перевернуту картку на true
// * - записуємо в змінну, яка призначена для зберігання першої перевернутої картки - картку на яку натиснули та зупиняємо роботу функції
// * Інакше записуємо картку на яку натиснули в змінну, яка призначена для зберігання другої перевернутої картки
// * Викликаємо функцію, яка визначає чи збігаються перевернуті картки і передаємо їй як аргументи значення фреймворку першої і другої картки. Підказку як отримати назву фреймворку може дати розмітка карток (Їх HTML код).
function cardClickHandler(e){
    if(firstInvertedCard && secondInvertedCard){
        return;
    }

    const card = e.target.closest('.memory-card');
    
    if(card === firstInvertedCard){
        // card.children[0].classList.add("flip")
        return
    }
    card.classList.add("flip");

    if(!invertedCard){
        invertedCard = true;
        firstInvertedCard = card;
        return;
    } else {
        secondInvertedCard = card;
    }
    matchingCards(firstInvertedCard.dataset.framework, secondInvertedCard.dataset.framework)
}

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Функція, що ініціалізує дошку. Функція приймає як параметри масив карток. Перебирає отриманий масив і при кожній ітерації (колу перебору): створює змінну, в яку записує значення розраховане за наступною формулою ОКРУГЛЕННЯ_ВНИЗ(ВИПАДКОВЕ_ЧИСЛО * КІЛЬКІСТЬ КАРТ), виводимо значення змінної в консоль.
function boardInitialization(cards){
    for (const card of cards) {
        const random = Math.floor(Math.random() * numberOfCards);
        card.style.order = random;
        card.addEventListener("click", cardClickHandler)
        
    }
}

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Функція блокування першої та другої картки. Функція має виконати такі дії:
// * - вивести в консоль повідомлення "Перша картка заблокована"
// * - вивести в консоль повідомлення "Друга картка заблокована"
// * - викликати функцію скидання змінних дошки
function cardBlocking(){
    removeEventListener("click", cardClickHandler)
    
    resetsValue();
}

////////////////////////////////////////// ! КіНЕЦЬ БЛОКУ КОДА //////////////////////////////////////////

// * Викликаємо функцію ініціалізації дошки, передаємо їй як аргумент масив [1, 2, 3, 4, 5, 6];
boardInitialization(allCards)

